<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="tabRigidBodies" label="Rigid Bodies">
    <memberTool name="fractureRig"/>
  </toolshelf>

  <shelfSet name="shelfSetGameDevelopment" label="Game Development">
    <memberToolshelf name="tabRigidBodies"/>
  </shelfSet>

  <tool name="fractureRig" label="Fracture Rig" icon="DOP_rbdfracturedobject">
    <helpText><![CDATA[=Fracture Rig=
"""This tool takes RBD Packed Object nodes, creates a subnet (/obj/FBX_EXPORT) containing all the individual pieces, and then keyframes their positions based on the simulation. Typical usage: baked destruction sequences.""" 

NOTE:
 This tool assumes you have already set up a fracture pipeline according the the Preflight below and have the correct simulation in mind. This tool should be the very last thing you do before exporting to FBX!

==Preflight==
There are a couple things that need to be checked before using this tool.

* There are minimal transform modifications to the original geometry. It's common for custom pipelines to have leftover transform modifications which can cause havoc.
* The timeline is set to the range you intend to export. If your timeline is set to 1-240, this tool will generate 240 keyframes from 1-240.

==If Packing Manually==
This pertains to custom pipelines where the packing is handled manually.

* If packing the object manually, the @name attribute must be in the following format: piece# (ex. piece0, piece1, piecce2, etc).
* If using mulitpple packed objects, each packed set should use the above naming starting at 0.

==Using this tool==
# Select the RBD Packed Object nodes in your DOP Network for processing.
# Click the tool's button!
# Export the resulting /obj/FBX_EXPORT subnet (might have a number appended if one exists) to an FBX file]]></helpText>
    <script scriptType="python"><![CDATA['''
Fracture Rig!
Author: Steven Burrichter
Company: Side Effects Software
Last Updated: 01/27/2016

SHELF TOOL: This points to the file externally in the /toolbar/src folder.
This is so you can use any external editor to modify the files.

IMPORTANT NOTES
1) Make sure the object you want to fracture is at the origin and has NO
transform modifications. Feel free to put an xform node at the SOP level, but
be warned that if you get any weird rotations or jittering, transforms are the
first culprit.

2) Set up your simulation exactly how you want it. If the transforms are set
properly, the pieces will be 1:1 with the simulation. THEN press the button.
This tool is designed to be the very last step in the process.

3) FOR YOUR RBD IMPORT IN THE DOP NETWORK: The script current does not parse
the default opinputpath. Please set the absolute or relative path.

4) If you run into transform issues in another program, check to make sure the
frame rates are the same! Houdini exports at 24fps by default!

CHANGES:
1) No longer need attribcreate in the sop network. It automatically finds
the correct geometry. If other nodes cause conflicts, add to if statement in
FindReferenceGeometry().

2) Tool now checks for the creation frame of the RBD Object Import node. You can
now set a custom start frame and the tool will automatically find the delta of
the rest attribute in the simulation!
'''

import sys
import hou

####################
#Add src directory 
#to path if it isn't there
####################
SOURCE  = hou.expandString('$HOUDINI_USER_PREF_DIR') + "/toolbar/src"

if SOURCE not in sys.path:
    sys.path.append(SOURCE)
    
####################
#Import FBXImport Script
####################
import FractureRig
reload(FractureRig)

#################################
#Class constructor call!
#################################
FractureRig.init(hou.selectedNodes())]]></script>
  </tool>
</shelfDocument>
